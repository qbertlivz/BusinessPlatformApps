<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HTTP_Error" xml:space="preserve">
    <value>HTTP Error</value>
  </data>
  <data name="HTTP_Get" xml:space="preserve">
    <value>HTTP Get</value>
  </data>
  <data name="HTTP_JSON_Error" xml:space="preserve">
    <value>Error in JSON deserialization routine</value>
  </data>
  <data name="HTTP_RetryCount" xml:space="preserve">
    <value>HTTP Retries</value>
  </data>
  <data name="HTTP_Try" xml:space="preserve">
    <value>HTTP Try</value>
  </data>
  <data name="ScheduledAzureMLProcessor_DataFound" xml:space="preserve">
    <value>New data found for AzureML</value>
  </data>
  <data name="ScheduledAzureMLProcessor_NoDataFound" xml:space="preserve">
    <value>No new data found for AzureML</value>
  </data>
  <data name="SocialGist_Search" xml:space="preserve">
    <value>SocialGist Search</value>
    <comment>SocialGist Search API</comment>
  </data>
  <data name="SocialGist_Thread" xml:space="preserve">
    <value>SocialGist Thread</value>
    <comment>SocialGist Thread API</comment>
  </data>
  <data name="ThreadProcessor_BatchSize" xml:space="preserve">
    <value>Threads In Batch</value>
    <comment>Number of threads per batch</comment>
  </data>
  <data name="ThreadProcessor_FilteredCommentCount" xml:space="preserve">
    <value>Filtered Comment Count</value>
    <comment>Number of comments after filtering</comment>
  </data>
  <data name="ThreadProcessor_FilteredCommentsAndPostsEvent" xml:space="preserve">
    <value>Filtered Comments and Posts</value>
    <comment>Event written after filtering all comments and posts</comment>
  </data>
  <data name="ThreadProcessor_FilteredPostCount" xml:space="preserve">
    <value>Filtered Post Count</value>
    <comment>Number of posts after filtering</comment>
  </data>
  <data name="ThreadProcessor_ForumId" xml:space="preserve">
    <value>Forum ID</value>
  </data>
  <data name="ThreadProcessor_ProcessThread" xml:space="preserve">
    <value>Process Thread</value>
    <comment>ThreadProcessor start processing a thread</comment>
  </data>
  <data name="ThreadProcessor_ThreadId" xml:space="preserve">
    <value>Thread ID</value>
  </data>
  <data name="ThreadProcessor_UnfilteredComments" xml:space="preserve">
    <value>Unfiltered Comments</value>
    <comment>Number of comments before filtering</comment>
  </data>
  <data name="ThreadProcessor_UnfilteredPosts" xml:space="preserve">
    <value>Unfiltered Posts</value>
    <comment>Number of posts before filtering</comment>
  </data>
</root>