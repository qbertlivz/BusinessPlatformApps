{

  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",

  "contentVersion": "1.0.0.0",

  "parameters": {

    "logicappname": {

      "defaultValue": "LogicApp",

      "type": "string"

    },

    "resourcegroup": {

      "defaultValue": "stresourcegroup",

      "type": "string"

    },

    "subscription": {

      "defaultValue": "idrequired",

      "type": "string"

    },

    "sitename": {

      "defaultValue": "sitename",

      "type": "string"

    },

    "searchquery": {

      "defaultValue": "searchQuery",

      "type": "string"

    }

  },

    "variables": {},

    "resources": [

      {

        "type": "Microsoft.Logic/workflows",

        "name": "[parameters('logicappname')]",

        "apiVersion": "2016-06-01",

        "location": "[resourceGroup().location]",

        "properties": {

          "state": "Enabled",

          "definition": {

            "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",

            "contentVersion": "1.0.0.0",

            "parameters": {

              "$connections": {

                "defaultValue": {},

                "type": "Object"

              }

            },

            "triggers": {

              "On_new_news_article": {

                "inputs": {

                  "host": {

                    "connection": {

                      "name": "@parameters('$connections')['bingsearch']['connectionId']"

                    }

                  },

                  "method": "get",

                  "path": "/trigger/news/search",

                  "queries": {

                    "count": "100",

                    "mkt": "en-US",

                    "offset": "0",

                    "q": "[parameters('searchquery')]",

                    "safeSearch": "Moderate"

                  }

                },

                "recurrence": {

                  "frequency": "Minute",

                  "interval": 5

                },

                "splitOn": "@triggerBody()",

                "type": "ApiConnection"

              }

            },

            "actions": {

              "AbstractExtractor": {

                "inputs": {

                  "body": {

                    "query": "@{trigger()['inputs']['queries']['q']}",

                    "text": "@{body('HTMLStripperWebHook')['NoTags']}"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/AbstractExtractor')]"

                  }

                },

                "runAfter": {

                  "HTMLStripperWebHook": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "UserDefinedEntitiesExtractor": {

                "inputs": {

                  "body": {

                    "text": "@{body('HTMLStripperWebHook')['Scrubbed']}"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/UserDefinedEntities')]"

                  }

                },

                "runAfter": {

                  "HTMLStripperWebHook": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "ArticleCleanerWebHook": {

                "inputs": {

                  "body": {

                    "text": "@body('ExtractArticle')['bodyInHtml']"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/ASCIICleanerWebhook')]"

                  }

                },

                "runAfter": {

                  "ExtractArticle": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "Detect_Sentiment": {

                "inputs": {

                  "body": {

                    "text": "@{substring(body('HTMLStripperWebHook')['NoTags'], 0, min(length(body('HTMLStripperWebHook')['NoTags']),5000))}"

                  },

                  "host": {



                    "connection": {

                      "name": "@parameters('$connections')['cognitiveservicestextanalytics']['connectionId']"

                    }

                  },

                  "method": "post",

                  "path": "/sentiment"

                },

                "runAfter": {

                  "AbstractExtractor": [

                    "Succeeded"

                  ]

                },

                "type": "ApiConnection"

              },

              "ExtractArticle": {

                "inputs": {

                  "body": {

                    "html": "@{body('HTTP')}",

                    "url": "@Json(body('UrlCleaner'))?['newUri']"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/ArticleExtractor')]"

                  }

                },

                "runAfter": {

                  "HTTP": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "UrlCleaner": {

                "inputs": {

                  "body": {

                    "url": "@{triggerBody()?['url']}"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/UrlCleaner')]"

                  }

                },

                "runAfter": {},

                "type": "Function"

              },

              "HTMLStripperWebHook": {

                "inputs": {

                  "body": {

                    "html": "@{body('ArticleCleanerWebHook')['text']}"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/HTMLCleanerWebhook')]"

                  }

                },

                "runAfter": {

                  "ArticleCleanerWebHook": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "HTTP": {

                "inputs": {

                  "method": "GET",

                  "uri": "@Json(body('UrlCleaner'))?['newUri']"

                },

                "runAfter": {

                  "UrlCleaner": [

                    "Succeeded"

                  ]

                },

                "type": "Http"

              },

              "MainImageExtractor": {

                "inputs": {

                  "body": {

                    "html": "@{body('HTTP')}"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/MainImageExtractor')]"

                  }

                },

                "runAfter": {

                  "HTTP": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "InsertDocument": {

                "runAfter": {

                  "Detect_Sentiment": [

                    "Succeeded"

                  ],

                  "TimeUtilsWebHook": [

                    "Succeeded"

                  ],

                  "TimeUtilsWebHook_2": [

                    "Succeeded"

                  ],

                  "MainImageExtractor": [

                    "Succeeded"

                  ],

                  "UrlDomainWebHook": [

                    "Succeeded"

                  ],

                  "UserDefinedEntitiesExtractor": [

                    "Succeeded"

                  ],

                  "Key_Phrases": [

                    "Succeeded"

                  ]

                },

                "type": "ApiConnection",

                "inputs": {

                  "body": {

                    "category": "@{triggerBody()?['category']}",

                    "cleanedText": "@{body('HTMLStripperWebHook')['NoTags']}",

                    "cleanedTextLength": "@{body('HTMLStripperWebHook')['NoTagsLength']}",

                    "abstract": "@{body('AbstractExtractor')?['Snippet']}",

                    "docid": "@Json(body('UrlCleaner'))?['triggerId']",

                    "imageHeight": "@triggerBody()?['image']?['thumbnail']?['height']",

                    "imageUrl": "@Json(body('MainImageExtractor'))?['ImageUrl']",

                    "imageWidth": "@triggerBody()?['image']?['thumbnail']?['width']",

                    "ingestDayPrecision": "@Json(body('TimeUtilsWebHook'))?['DayPrecision']",

                    "ingestHourPrecision": "@Json(body('TimeUtilsWebHook'))?['HourPrecision']",

                    "ingestMinutePrecision": "@Json(body('TimeUtilsWebHook'))?['MinutePrecision']",

                    "ingestMonthPrecision": "@Json(body('TimeUtilsWebHook'))?['MonthPrecision']",

                    "ingestTimestamp": "@Json(body('TimeUtilsWebHook'))?['Timestamp']",

                    "ingestWeekPrecision": "@Json(body('TimeUtilsWebHook'))?['WeekPrecision']",

                    "keyPhraseJson": "@{body('Key_Phrases')?['keyPhrases']}",

                    "publishedDayPrecision": "@Json(body('TimeUtilsWebHook_2'))?['DayPrecision']",

                    "publishedHourPrecision": "@Json(body('TimeUtilsWebHook_2'))?['HourPrecision']",

                    "publishedMinutePrecision": "@Json(body('TimeUtilsWebHook_2'))?['MinutePrecision']",

                    "publishedMonthPrecision": "@Json(body('TimeUtilsWebHook_2'))?['MonthPrecision']",

                    "publishedTimestamp": "@Json(body('TimeUtilsWebHook_2'))?['Timestamp']",

                    "publishedWeekPrecision": "@Json(body('TimeUtilsWebHook_2'))?['WeekPrecision']",

                    "sentimentScore": "@body('Detect_Sentiment')?['score']",

                    "sourceDomain": "@{body('UrlDomainWebHook')?['host']}",

                    "sourceUrl": "@Json(body('UrlCleaner'))?['newUri']",

                    "text": "@{body('HTMLStripperWebHook')['Scrubbed']}",

                    "textLength": "@{body('HTMLStripperWebHook')['ScrubbedLength']}",

                    "userDefinedEntities": "@{body('UserDefinedEntitiesExtractor')?['entities']}",

                    "title": "@{triggerBody()?['name']}"

                  },

                  "host": {

                    "connection": {

                      "name": "@parameters('$connections')['sql']['connectionId']"

                    }

                  },

                  "method": "post",

                  "path": "/datasets/default/procedures/@{encodeURIComponent(encodeURIComponent('[bpst_news].[sp_write_document]'))}"

                }

              },

              "Key_Phrases": {

                "inputs": {

                  "body": {

                    "text": "@{substring(body('HTMLStripperWebHook')['NoTags'], 0, min(length(body('HTMLStripperWebHook')['NoTags']),5000))}"

                  },

                  "host": {



                    "connection": {

                      "name": "@parameters('$connections')['cognitiveservicestextanalytics']['connectionId']"

                    }

                  },

                  "method": "post",

                  "path": "/keyPhrases"

                },

                "runAfter": {

                  "AbstractExtractor": [

                    "Succeeded"

                  ]

                },

                "type": "ApiConnection"

              },

              "TimeUtilsWebHook": {

                "inputs": {

                  "body": {

                    "date": "@utcnow()"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/TimeUtilsWebhook')]"

                  }

                },

                "runAfter": {},

                "type": "Function"

              },

              "TimeUtilsWebHook_2": {

                "inputs": {

                  "body": {

                    "date": "@triggerBody()?['datePublished']"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/TimeUtilsWebhook')]"

                  }

                },

                "runAfter": {},

                "type": "Function"

              },

              "UrlDomainWebHook": {

                "inputs": {

                  "body": {

                    "url": "@Json(body('UrlCleaner'))?['newUri']"

                  },

                  "function": {

                    "id": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/sites/', parameters('sitename'), '/Functions/UrlDomainWebhook')]"

                  }

                },

                "runAfter": {

                  "AbstractExtractor": [

                    "Succeeded"

                  ]

                },

                "type": "Function"

              },

              "For_each": {

                "actions": {

                  "Insert_row": {

                    "inputs": {

                      "body": {

                        "documentId": "@Json(body('UrlCleaner'))?['triggerId']",

                        "searchterms": "@item()['match']"

                      },

                      "host": {

                        "connection": {

                          "name": "@parameters('$connections')['sql']['connectionId']"

                        }

                      },

                      "method": "post",

                      "path": "/datasets/default/tables/@{encodeURIComponent(encodeURIComponent('[bpst_news].[documentsearchterms]'))}/items"

                    },

                    "runAfter": {},

                    "type": "ApiConnection"

                  }

                },

                "foreach": "@body('AbstractExtractor')?['Matches']",

                "runAfter": {

                  "InsertDocument": [

                    "Succeeded"

                  ]

                },

                "type": "Foreach"

              }

            },

            "outputs": {}

          },

          "parameters": {

            "$connections": {

              "value": {

                "bingsearch": {

                  "connectionId": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/connections/bingsearch')]",

                  "connectionName": "bingsearch",

                  "id": "[concat('/subscriptions/', parameters('subscription'), '/providers/Microsoft.Web/locations/westus/managedApis/bingsearch')]"

                },

                "cognitiveservicestextanalytics": {

                  "connectionId": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/connections/cognitiveservicestextanalytics')]",

                  "connectionName": "cognitiveservicestextanalytics",

                  "id": "[concat('/subscriptions/', parameters('subscription'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/cognitiveservicestextanalytics')]"

                },

                "sql": {

                  "connectionId": "[concat('/subscriptions/', parameters('subscription'), '/resourceGroups/',parameters('resourcegroup'),'/providers/Microsoft.Web/connections/sql')]",

                  "connectionName": "sql",

                  "id": "[concat('/subscriptions/', parameters('subscription'), '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/sql')]"

                }

              }

            }

          }

        },

        "resources": [],

        "dependsOn": []

      }

    ],

    "outputs": {}

  }