{
  "properties": {
    "package": {
      "nodes": {
        "node1": {
          "assetId": "asset1",
          "inputId": null,
          "outputId": null,
          "parameters": {}
        },
        "node2": {
          "assetId": "asset2",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "R Script": {
              "value": "# The script MUST contain a function named azureml_main\n# which is the entry point for this module.\n\n# imports up here can be used to \nimport pandas as pd\nimport numpy as np\n\n# The entry point function can contain up to two input arguments:\n#   Param<dataframe1>: a pandas.DataFrame\n#   Param<dataframe2>: a pandas.DataFrame\ndef azureml_main(dataframe1 = None, dataframe2 = None):\n    \n    frame = dataframe1\n    \n    frame = frame.drop('text', axis=1).drop('Article', axis=1).drop('RowNumber', axis=1)\n    \n    frame['offsetDocumentPercentage'] = np.maximum(frame['Offset'] / frame['DocumentTextLength'], 0.000001)\n\n    frame = frame.rename(columns = {'Mention': 'entityValue', 'Offset': 'offset', 'Length': 'length', 'Type': 'entityType', 'DocumentId': 'documentId'})\n\n    frame = frame.drop('DocumentTextLength', axis=1)\n    \n    return frame",
              "certificateThumbprint": ""
            },
            "Python Version": {
              "value": "Anaconda 4.0/Python 2.7.11",
              "certificateThumbprint": ""
            }
          }
        },
        "node3": {
          "assetId": "asset3",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "Comma-separated case-sensitive names of join key columns for L": {
              "value": "%7B%22isFilter%22%3Atrue%2C%22rules%22%3A%5B%7B%22ruleType%22%3A%22ColumnNames%22%2C%22columns%22%3A%5B%22Article%22%5D%2C%22exclude%22%3Afalse%7D%5D%7D",
              "certificateThumbprint": ""
            },
            "Comma-separated case-sensitive names of join key columns for R": {
              "value": "%7B%22isFilter%22%3Atrue%2C%22rules%22%3A%5B%7B%22ruleType%22%3A%22ColumnNames%22%2C%22columns%22%3A%5B%22RowNumber%22%5D%2C%22exclude%22%3Afalse%7D%5D%7D",
              "certificateThumbprint": ""
            },
            "Match case": {
              "value": "True",
              "certificateThumbprint": ""
            },
            "Join type": {
              "value": "Inner Join",
              "certificateThumbprint": ""
            },
            "Keep right key columns in joined table": {
              "value": "True",
              "certificateThumbprint": ""
            }
          }
        },
        "node4": {
          "assetId": "asset2",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "R Script": {
              "value": "# The script MUST contain a function named azureml_main\n# which is the entry point for this module.\n\n# imports up here can be used to \nimport pandas as pd\nimport json\n\n# The entry point function can contain up to two input arguments:\n#   Param<dataframe1>: a pandas.DataFrame\n#   Param<dataframe2>: a pandas.DataFrame\ndef azureml_main(dataframe1 = None, dataframe2 = None):\n\n    def getCssClass(x):\n        return {\n            'TIL': 'fa fa-certificate',\n            'PER': 'fa fa-male',\n            'ORG': 'fa fa-sitemap',\n            'LOC': 'fa fa-globe'\n        }.get(x, 'fa fa-question')\n\n    def getColor(x):\n        return {\n            'TIL': '#FFFFFF',\n            'PER': '#1BBB6A',\n            'ORG': '#FF001F',\n            'LOC': '#FF8000'\n        }.get(x, '#000000')\n\n    def func(row):\n        result = json.dumps({'entityValue': row.entityValue, 'offset': row.offset, 'length': row.length, 'entityType': row.entityType, 'cssClass': getCssClass(row.entityType), 'cssColor': getColor(row.entityType), 'offsetPercentage': row.offsetDocumentPercentage})\n        return pd.Series({'documentId': row.documentId, 'compressedEntitiesJson': result})\n\n    if dataframe1.empty:\n        columns = ['documentId','compressedEntitiesJson']\n        return pd.DataFrame(columns=columns)\n    else:\n        # Create a JSON version of each entity\n        jsonDataframe = dataframe1.apply(func, axis=1)\n\n        # Create a column with all JSON entities in an array    \n        return jsonDataframe.groupby(['documentId'])['compressedEntitiesJson'].apply(lambda x: '[' + ','.join(x) + ']').reset_index()\n",
              "certificateThumbprint": ""
            },
            "Python Version": {
              "value": "Anaconda 4.0/Python 2.7.11",
              "certificateThumbprint": ""
            }
          }
        },
        "node5": {
          "assetId": "asset4",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "Please Specify Data Source": {
              "value": "SqlAzure",
              "certificateThumbprint": ""
            },
            "Database Server Name": {
              "value": "pbisttest.database.windows.net",
              "certificateThumbprint": ""
            },
            "Database Name": {
              "value": "TestNews",
              "certificateThumbprint": ""
            },
            "Server User Account Name": {
              "value": "pbiadmin",
              "certificateThumbprint": ""
            },
            "Server User Account Password": {
              "value": "PlacementPassword",
              "certificateThumbprint": ""
            },
            "Trust Server Certificate": {
              "value": "False",
              "certificateThumbprint": ""
            },
            "Database Query": {
              "value": "select \n    cleanedText as text, \n    id as DocumentId, \n    DATALENGTH(text) AS DocumentTextLength,\n    \n    -- ROW_NUMBER is 1 based but the NER module returns 0 based index\n    -- This is needed because the NER module returns an index into the original set \n    -- as the document ID instead of the actual document ID column   \n    (ROW_NUMBER() OVER(ORDER BY id) - 1) AS RowNumber \nFROM bpst_news.documents",
              "certificateThumbprint": ""
            }
          }
        },
        "node6": {
          "assetId": "asset5",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "Please Specify Data Destination": {
              "value": "SqlAzure",
              "certificateThumbprint": ""
            },
            "Database Server Name": {
              "value": "pbisttest.database.windows.net",
              "certificateThumbprint": ""
            },
            "Database Name": {
              "value": "TestNews",
              "certificateThumbprint": ""
            },
            "Server User Account Name": {
              "value": "pbiadmin",
              "certificateThumbprint": ""
            },
            "Server User Account Password": {
              "value": "PlacementPassword",
              "certificateThumbprint": ""
            },
            "Trust Server Certificate": {
              "value": "False",
              "certificateThumbprint": ""
            },
            "Comma separated list of columns to be saved": {
              "value": "documentId,entityType,entityValue,offset,offsetDocumentPercentage,length",
              "certificateThumbprint": ""
            },
            "Data Table Name": {
              "value": "bpst_news.stg_entities",
              "certificateThumbprint": ""
            },
            "Comma separated list of datatable columns": {
              "value": "documentId,entityType,entityValue,offset,offsetDocumentPercentage,length",
              "certificateThumbprint": ""
            },
            "SQL Azure Number Of Rows To Write": {
              "value": "200",
              "certificateThumbprint": ""
            },
            "Treat Errors as Warnings": {
              "value": "False",
              "certificateThumbprint": ""
            }
          }
        },
        "node7": {
          "assetId": "asset5",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "Please Specify Data Destination": {
              "value": "SqlAzure",
              "certificateThumbprint": ""
            },
            "Database Server Name": {
              "value": "pbisttest.database.windows.net",
              "certificateThumbprint": ""
            },
            "Database Name": {
              "value": "TestNews",
              "certificateThumbprint": ""
            },
            "Server User Account Name": {
              "value": "pbiadmin",
              "certificateThumbprint": ""
            },
            "Server User Account Password": {
              "value": "PlacementPassword",
              "certificateThumbprint": ""
            },
            "Trust Server Certificate": {
              "value": "False",
              "certificateThumbprint": ""
            },
            "Comma separated list of columns to be saved": {
              "value": "documentId,compressedEntitiesJson",
              "certificateThumbprint": ""
            },
            "Data Table Name": {
              "value": "bpst_news.stg_documentcompressedentities",
              "certificateThumbprint": ""
            },
            "Comma separated list of datatable columns": {
              "value": "documentId,compressedEntitiesJson",
              "certificateThumbprint": ""
            },
            "SQL Azure Number Of Rows To Write": {
              "value": "200",
              "certificateThumbprint": ""
            },
            "Treat Errors as Warnings": {
              "value": "False",
              "certificateThumbprint": ""
            }
          }
        },
        "node8": {
          "assetId": "asset6",
          "inputId": null,
          "outputId": null,
          "parameters": {
            "SQL Query Script": {
              "value": "select * from t1\nWHERE type != 'TIL'",
              "certificateThumbprint": ""
            }
          }
        }
      },
      "edges": [
        {
          "sourceNodeId": "node1",
          "sourcePortId": "Entities",
          "targetNodeId": "node8",
          "targetPortId": "Table1"
        },
        {
          "sourceNodeId": "node2",
          "sourcePortId": "Result Dataset",
          "targetNodeId": "node4",
          "targetPortId": "Dataset1"
        },
        {
          "sourceNodeId": "node2",
          "sourcePortId": "Result Dataset",
          "targetNodeId": "node6",
          "targetPortId": "Dataset"
        },
        {
          "sourceNodeId": "node3",
          "sourcePortId": "Results dataset",
          "targetNodeId": "node2",
          "targetPortId": "Dataset1"
        },
        {
          "sourceNodeId": "node4",
          "sourcePortId": "Result Dataset",
          "targetNodeId": "node7",
          "targetPortId": "Dataset"
        },
        {
          "sourceNodeId": "node5",
          "sourcePortId": "Results dataset",
          "targetNodeId": "node1",
          "targetPortId": "Story"
        },
        {
          "sourceNodeId": "node5",
          "sourcePortId": "Results dataset",
          "targetNodeId": "node3",
          "targetPortId": "Dataset2"
        },
        {
          "sourceNodeId": "node8",
          "sourcePortId": "Results dataset",
          "targetNodeId": "node3",
          "targetPortId": "Dataset1"
        }
      ],
      "graphParameters": {
        "Database server name": {
          "description": "Database server name",
          "type": "String",
          "links": [
            {
              "nodeId": "node5",
              "parameterKey": "Database Server Name"
            },
            {
              "nodeId": "node6",
              "parameterKey": "Database Server Name"
            },
            {
              "nodeId": "node7",
              "parameterKey": "Database Server Name"
            }
          ]
        },
        "Database name": {
          "description": "Database name",
          "type": "String",
          "links": [
            {
              "nodeId": "node5",
              "parameterKey": "Database Name"
            },
            {
              "nodeId": "node6",
              "parameterKey": "Database Name"
            },
            {
              "nodeId": "node7",
              "parameterKey": "Database Name"
            }
          ]
        },
        "User name": {
          "description": "User name",
          "type": "String",
          "links": [
            {
              "nodeId": "node5",
              "parameterKey": "Server User Account Name"
            },
            {
              "nodeId": "node6",
              "parameterKey": "Server User Account Name"
            },
            {
              "nodeId": "node7",
              "parameterKey": "Server User Account Name"
            }
          ]
        }
      }
    },
    "title": "entity12",
    "description": "Solution Template",
    "createdOn": "2017-06-05T15:04:52.0097794Z",
    "modifiedOn": "2017-06-05T15:05:03.4771262Z",
    "provisioningState": "Succeeded",
    "keys": null,
    "readOnly": false,
    "swaggerLocation": "https://ussouthcentral.services.azureml.net/subscriptions/20ea4e8dd3d94f1d947c441675acd4f7/services/770e7685696743f8ab67792ce545b4eb/swagger.json",
    "exposeSampleData": false,
    "realtimeConfiguration": {
      "maxConcurrentCalls": 20
    },
    "diagnostics": {
      "level": "None",
      "expiry": null
    },
    "storageAccount": {
      "name": "storage0edt4s5g86",
      "key": null
    },
    "machineLearningWorkspace": null,
    "commitmentPlan": null,
    "input": {
      "title": "",
      "description": "",
      "type": "object",
      "properties": {}
    },
    "output": {
      "title": "",
      "description": "",
      "type": "object",
      "properties": {}
    },
    "exampleRequest": {
      "inputs": null,
      "globalParameters": {
        "Database server name": "pbist.database.windows.net",
        "Database name": "NewsTemplateTest",
        "User name": "pbiadmin"
      }
    },
    "assets": {
      "asset1": {
        "name": "Named Entity Recognition",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.50b91b4f9c9840d698142d945c0bb3f1.v1-default-1611",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      },
      "asset2": {
        "name": "Execute Python Script",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.cdb56f957f4c404dbde75bb972e6f232.v1-default-1735",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      },
      "asset3": {
        "name": "Join Data",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.124865f7e9014656adacf4cb08248099.v1-default-1712",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      },
      "asset4": {
        "name": "Import Data",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.4e1b0fe6aded4b3fa36f39b8862b9004.v1-default-1742",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      },
      "asset5": {
        "name": "Export Data",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.7a391181b6a74ad4b82de419c0d6522c.v1-default-1742",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      },
      "asset6": {
        "name": "Apply SQL Transformation",
        "id": null,
        "type": "Module",
        "locationInfo": {
          "uri": "aml://module/506153734175476c4f62416c57734963.90381e8067c34d9987541db785b7ea37.v1-default-1742",
          "credentials": ""
        },
        "inputPorts": null,
        "outputPorts": null,
        "metadata": null,
        "parameters": null
      }
    },
    "parameters": {
      "database server name": {
        "value": "pbisttest.database.windows.net",
        "certificateThumbprint": ""
      },
      "database name": {
        "value": "TestNews",
        "certificateThumbprint": ""
      },
      "user name": {
        "value": "pbiadmin",
        "certificateThumbprint": ""
      }
    },
    "payloadsInBlobStorage": false,
    "payloadsLocation": null,
    "packageType": "Graph"
  },
  "id": "/subscriptions/20ea4e8d-d3d9-4f1d-947c-441675acd4f7/resourceGroups/amlTest/providers/Microsoft.MachineLearning/webServices/EntitiesWebService0edt4s5g86",
  "name": "EntitiesWebService0edt4s5g86",
  "location": "South Central US",
  "type": "Microsoft.MachineLearning/webServices",
  "tags": {}
}